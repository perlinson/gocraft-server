// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: block.proto

package block

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	P             int32                  `protobuf:"varint,1,opt,name=p,proto3" json:"p,omitempty"`
	Q             int32                  `protobuf:"varint,2,opt,name=q,proto3" json:"q,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkRequest) Reset() {
	*x = ChunkRequest{}
	mi := &file_block_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRequest) ProtoMessage() {}

func (x *ChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRequest.ProtoReflect.Descriptor instead.
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkRequest) GetP() int32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *ChunkRequest) GetQ() int32 {
	if x != nil {
		return x.Q
	}
	return 0
}

func (x *ChunkRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ChunkUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	P             int32                  `protobuf:"varint,1,opt,name=p,proto3" json:"p,omitempty"`
	Q             int32                  `protobuf:"varint,2,opt,name=q,proto3" json:"q,omitempty"`
	Blocks        []int32                `protobuf:"varint,3,rep,packed,name=blocks,proto3" json:"blocks,omitempty"`
	Version       string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkUpdate) Reset() {
	*x = ChunkUpdate{}
	mi := &file_block_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkUpdate) ProtoMessage() {}

func (x *ChunkUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkUpdate.ProtoReflect.Descriptor instead.
func (*ChunkUpdate) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkUpdate) GetP() int32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *ChunkUpdate) GetQ() int32 {
	if x != nil {
		return x.Q
	}
	return 0
}

func (x *ChunkUpdate) GetBlocks() []int32 {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ChunkUpdate) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type FetchChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	P             int32                  `protobuf:"varint,1,opt,name=p,proto3" json:"p,omitempty"`
	Q             int32                  `protobuf:"varint,2,opt,name=q,proto3" json:"q,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchChunkRequest) Reset() {
	*x = FetchChunkRequest{}
	mi := &file_block_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChunkRequest) ProtoMessage() {}

func (x *FetchChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChunkRequest.ProtoReflect.Descriptor instead.
func (*FetchChunkRequest) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{2}
}

func (x *FetchChunkRequest) GetP() int32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *FetchChunkRequest) GetQ() int32 {
	if x != nil {
		return x.Q
	}
	return 0
}

func (x *FetchChunkRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             int32                  `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             int32                  `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
	W             int32                  `protobuf:"varint,4,opt,name=w,proto3" json:"w,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_block_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{3}
}

func (x *Block) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Block) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Block) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Block) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

type FetchChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*Block               `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchChunkResponse) Reset() {
	*x = FetchChunkResponse{}
	mi := &file_block_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChunkResponse) ProtoMessage() {}

func (x *FetchChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChunkResponse.ProtoReflect.Descriptor instead.
func (*FetchChunkResponse) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{4}
}

func (x *FetchChunkResponse) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *FetchChunkResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdateBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	P             int32                  `protobuf:"varint,2,opt,name=p,proto3" json:"p,omitempty"`
	Q             int32                  `protobuf:"varint,3,opt,name=q,proto3" json:"q,omitempty"`
	X             int32                  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
	Z             int32                  `protobuf:"varint,6,opt,name=z,proto3" json:"z,omitempty"`
	W             int32                  `protobuf:"varint,7,opt,name=w,proto3" json:"w,omitempty"`
	Version       string                 `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBlockRequest) Reset() {
	*x = UpdateBlockRequest{}
	mi := &file_block_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlockRequest) ProtoMessage() {}

func (x *UpdateBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlockRequest.ProtoReflect.Descriptor instead.
func (*UpdateBlockRequest) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBlockRequest) GetP() int32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *UpdateBlockRequest) GetQ() int32 {
	if x != nil {
		return x.Q
	}
	return 0
}

func (x *UpdateBlockRequest) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *UpdateBlockRequest) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *UpdateBlockRequest) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *UpdateBlockRequest) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *UpdateBlockRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdateBlockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBlockResponse) Reset() {
	*x = UpdateBlockResponse{}
	mi := &file_block_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlockResponse) ProtoMessage() {}

func (x *UpdateBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlockResponse.ProtoReflect.Descriptor instead.
func (*UpdateBlockResponse) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateBlockResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_block_proto protoreflect.FileDescriptor

var file_block_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x44, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0b, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x77, 0x22, 0x54, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x70, 0x12, 0x0c,
	0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x71, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0xd7, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x43, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x13, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x73, 0x6f,
	0x6e, 0x2f, 0x67, 0x6f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_block_proto_rawDescOnce sync.Once
	file_block_proto_rawDescData []byte
)

func file_block_proto_rawDescGZIP() []byte {
	file_block_proto_rawDescOnce.Do(func() {
		file_block_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_block_proto_rawDesc), len(file_block_proto_rawDesc)))
	})
	return file_block_proto_rawDescData
}

var file_block_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_block_proto_goTypes = []any{
	(*ChunkRequest)(nil),        // 0: block.ChunkRequest
	(*ChunkUpdate)(nil),         // 1: block.ChunkUpdate
	(*FetchChunkRequest)(nil),   // 2: block.FetchChunkRequest
	(*Block)(nil),               // 3: block.Block
	(*FetchChunkResponse)(nil),  // 4: block.FetchChunkResponse
	(*UpdateBlockRequest)(nil),  // 5: block.UpdateBlockRequest
	(*UpdateBlockResponse)(nil), // 6: block.UpdateBlockResponse
}
var file_block_proto_depIdxs = []int32{
	3, // 0: block.FetchChunkResponse.blocks:type_name -> block.Block
	2, // 1: block.BlockService.FetchChunk:input_type -> block.FetchChunkRequest
	5, // 2: block.BlockService.UpdateBlock:input_type -> block.UpdateBlockRequest
	0, // 3: block.BlockService.StreamChunk:input_type -> block.ChunkRequest
	4, // 4: block.BlockService.FetchChunk:output_type -> block.FetchChunkResponse
	6, // 5: block.BlockService.UpdateBlock:output_type -> block.UpdateBlockResponse
	1, // 6: block.BlockService.StreamChunk:output_type -> block.ChunkUpdate
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_block_proto_init() }
func file_block_proto_init() {
	if File_block_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_block_proto_rawDesc), len(file_block_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_block_proto_goTypes,
		DependencyIndexes: file_block_proto_depIdxs,
		MessageInfos:      file_block_proto_msgTypes,
	}.Build()
	File_block_proto = out.File
	file_block_proto_goTypes = nil
	file_block_proto_depIdxs = nil
}
